// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(DivineContext))]
    [Migration("20191121101355_DivineDB")]
    partial class DivineDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.ServiceAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceAttachPath");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAttachment");
                });

            modelBuilder.Entity("Domain.ServiceEngineer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DateOfJoin");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IsDelete");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("ServiceEngineer");
                });

            modelBuilder.Entity("Domain.ServiceQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsReply");

                    b.Property<string>("QuotationDesc");

                    b.Property<string>("QuotationTitle");

                    b.Property<DateTime?>("ServiceDate");

                    b.Property<string>("ServiceDescription");

                    b.Property<Guid?>("ServiceEngId");

                    b.Property<string>("ServiceTitle");

                    b.Property<int>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceEngId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceQuotation");
                });

            modelBuilder.Entity("Domain.UploadDocumentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocumentPath");

                    b.Property<string>("IsDelete");

                    b.Property<string>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UploadDocumentImage");
                });

            modelBuilder.Entity("Domain.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPhone");

                    b.Property<string>("CompanyWebSite");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IsDelete");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.ServiceAttachment", b =>
                {
                    b.HasOne("Domain.ServiceQuotation", "ServiceQuotation")
                        .WithMany("ServiceAttachments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ServiceQuotation", b =>
                {
                    b.HasOne("Domain.ServiceEngineer", "ServiceEngineer")
                        .WithMany()
                        .HasForeignKey("ServiceEngId");

                    b.HasOne("Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UploadDocumentImage", b =>
                {
                    b.HasOne("Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
